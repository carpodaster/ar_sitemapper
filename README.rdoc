== ActiveRecord Sitemapper
=== Low-level sitemap-building

The standard approach to generate XML sitemaps for a Ruby on Rails application
seems to be creating a special SitemapsController with rxml views and a bit
of routes.rb magic.

I used to generate sitemaps created thus via a nightly rake task to have them
cached and delivered statically by Apache. That felt wrong, I wanted a more
"low-level" approach. Actually, as low-level as possible and I ended up at
ActiveRecord::Base: this plugin enhances your ActiveRecord model to export 
its data to a sitemap in an intuitive way.

Also yes, I know there are probably a gazillion projects covering this already.

== Installation

To add *ar_sitemapper* to your Rails project, type

  $ ruby script/plugin install git://github.com/carpodaster/ar_sitemapper.git

== Usage

=== ActiveRecord drop-in

You can use +build_sitemap+ directly on any ActiveRecord model. The following
example will create a sitemap of all your Content objects as RAILS_ROOT/public/sitemap_contents.xml.gz:

  Content.build_sitemap :all do |content, xml|
    xml.loc content_url(content)
    xml.changefreq 'weekly'
    xml.lastmod content.updated_at.strftime("%Y-%m-%d")
    xml.priority 0.5
  end

You can pass ActiveRecord::Base.find options as arguments to +build_sitemap+
to fine-tune the selection of objects you want to extract:

  Post.build_sitemap :all, :conditions => ["published IS TRUE"], :order => :name do |post, xml|
    # do stuff here
  end

*Note*: if you want to use your named route helpers in the block, be sure to have
ActionController::UrlWriter included. Setting default_url_options[:host]
is helpful, too.

=== Output

*ar_sitemapper* will derive its sitemap filename from the model's name and will
default to Gzip compressed output. If can write to +stdout+ as well if +file+
is explicitely set to +nil+ or +false+.

It will automatically compress your XML sitemap with Gzip if the
filename parameter suggests it (ie. ends with ".gz"). Alternatively, you can
enforce or disable Gzip compression by passing true or false to the +gzip+ option.

Both of the following examples will create a gzip'ed file named "test.xml.gz":

  Content.build_sitemap :all, :file => "test.xml.gz" { |content, xml| ... }
  Content.build_sitemap :all, :file => "test.xml", :gzip => true { |content, xml| ... }

=== Sitemaps for static data

Sitemap creation is done via a block, so you can do whatever you want in it.
For added flexibility, you can use *ar_sitemapper* with arbitrary data
collections (ie. generating sitemaps for static content). Future versions will
support YAML configuration of such static content.

  sites = [
    { :url => "http://example.com/your/static/content1.html", :freq => "always",  :prio => "1.0" },
    { :url => "http://example.com/your/static/content2.html", :freq => "monthly", :prio => "0.3" },
  ]

  AegisNet::Sitemapper::Generator.create(sites) do |site, xml|
    xml.loc site[:url]
    xml.changefreq site[:freq]
    xml.priority site[:prio]
  end


---

Copyright (c) 2010 Carsten Zimmermann, released under a BSD-type license
